@model List<eAdministrationLabs.Models.ViewModels.RequestViewModel>


<link href="~/layoutlabs/css/bg_title.css" rel="stylesheet" />


<div class="background-image">
    <div class="content">
        <h3>Request / Submit a request</h3>
    </div>
</div>

<div class="container mt-4">
    <h2 style="margin-bottom:10vh;">List of Requests changed by: @ViewData["ChangedBy"]</h2>

    <table class="table table-bordered table-striped">
        <thead>
            <tr class="text-dark">
                <th scope="col">Lab Name</th>
                <th scope="col">Equipment</th>
                <th scope="col">Status</th>
                <th scope="col">Notes</th>
                <th scope="col">Changed By</th>
                <th scope="col">Image</th>
                <th scope="col">Created At</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Count > 0)
            {
                foreach (var request in Model)
                {
                    <tr class="text-dark">
                        <td>@request.LabName</td>
                        <td>@request.EquipmentName</td>

                        <td style="max-width:220px;">
                            <div style="display: flex; align-items: center;">
                                <select class="form-control status-select" data-id="@request.Id" data-current-status="@request.StatusName" onchange="handleStatusChange(this)" style="width: 150px;">
                                    @foreach (var status in ViewBag.StatusOptions)
                                    {
                                        <option value="@status.Id" selected="@(status.StatusName == request.StatusName)">
                                            @status.StatusName
                                        </option>
                                    }
                                </select>
                                <button type="button" class="btn btn-success checkmark-btn" style="display:none; margin-left: 10px;" onclick="redirectToCompletionDetails(@request.Id)">
                                    <i class="fa fa-check"></i>
                                </button>
                            </div>
                        </td>

                        <td title="@request.Notes">
                            @if (!string.IsNullOrEmpty(request.Notes))
                            {
                                @(request.Notes.Length > 50 ? request.Notes.Substring(0, 50) + "..." : request.Notes)
                            }
                            else
                            {
                                <span class="text-muted">No notes</span>
                            }
                        </td>
                        <td>@request.ChangedBy</td>
                     
                        
                        <td>
                                @if (!string.IsNullOrEmpty(request.ImageBase64))
                                {
                                <img src="data:image/png;base64,@request.ImageBase64" class="img-thumbnail" style="max-width: 100px; max-height: 100px;" alt="Request Image" onclick="showImage(this)"  />
                                }
                                else
                                {
                                <span class="text-muted">No image</span>
                                }
                        </td>

                        <td>@request.CreatedAt.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center text-muted"><em>There is no suitable data to display.</em></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $(".status-select").change(function () {
                var id = $(this).data("id");
                var statusId = $(this).val();

                $.ajax({
                    url: '@Url.Action("UpdateStatus")',
                    type: 'POST',
                    data: {
                        id: id,
                        statusId: statusId
                    },
                    success: function (result) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Status update successful.'
                        });
                    },
                    error: function () {
                        alert("There was an error updating status.");
                    }
                });
            });
        });
    </script>


    <script>
        function handleStatusChange(selectElement) {
            var selectedStatusName = selectElement.options[selectElement.selectedIndex].text;
            var requestId = $(selectElement).data('id');

            // If status is "Complete", show the checkmark button
            if (selectedStatusName === "Complete") {
                $('.checkmark-btn').show();  // Show the checkmark button
            } else {
                $('.checkmark-btn').hide();  // Hide the checkmark button
            }
        }

        // Redirect to the CompletionDetails page when the checkmark is clicked
        function redirectToCompletionDetails(requestId) {
            window.location.href = '/Request/CreateCompletion/' + requestId;
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selects = document.querySelectorAll('.status-select');

            selects.forEach(select => {
                const currentStatus = select.getAttribute('data-current-status');

                // Define status transitions
                const allowedTransitions = {
                    "Pending": ["Approved", "Reject"],
                    "Approved": ["In Progress"],
                    "In Progress": ["Complete"]
                };

                // Initialize options based on current status
                updateSelectOptions(select, currentStatus, allowedTransitions);

                // Check if the current status is 'Complete' to show the button
                if (currentStatus === "Complete") {
                    const checkmarkBtn = select.nextElementSibling;
                    if (checkmarkBtn && checkmarkBtn.classList.contains('checkmark-btn')) {
                        checkmarkBtn.style.display = 'inline-block';
                    }
                }
            });
        });

        function handleStatusChange(selectElement) {
            const newStatus = selectElement.options[selectElement.selectedIndex].text;
            const allowedTransitions = {
                "Pending": ["Approved", "Reject"],
                "Approved": ["In Progress"],
                "In Progress": ["Complete"]
            };

            // Update the select options based on the new status
            updateSelectOptions(selectElement, newStatus, allowedTransitions);

            // Show/hide the 'Complete' button based on the new status
            const checkmarkBtn = selectElement.nextElementSibling;
            if (newStatus === "Complete") {
                checkmarkBtn.style.display = 'inline-block';
            } else {
                checkmarkBtn.style.display = 'none';
            }
        }

        function updateSelectOptions(select, currentStatus, allowedTransitions) {
            const allowedStatuses = allowedTransitions[currentStatus] || [];

            // Show/hide options based on allowed statuses
            Array.from(select.options).forEach(option => {
                if (allowedStatuses.includes(option.text) || option.text === currentStatus) {
                    option.style.display = 'block'; // Show allowed options
                } else {
                    option.style.display = 'none'; // Hide not allowed options
                }
            });

            // Update the data-current-status attribute
            select.setAttribute('data-current-status', currentStatus);
        }
    </script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Khởi tạo Select2
            $('#statusFilter').select2({
                width: '100%',  // Đảm bảo Select2 chiếm toàn bộ chiều rộng
                placeholder: "Select a status",  // Thêm placeholder nếu cần
                allowClear: true // Cho phép xóa lựa chọn
            });
        });

        function showImage(imgElement) {
            var src = imgElement.src;
            var modal = document.createElement('div');
            modal.id = 'imageModal';
            modal.style.position = 'fixed';
            modal.style.top = '50%';
            modal.style.left = '50%';
            modal.style.transform = 'translate(-50%, -50%)';
            modal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
            modal.style.zIndex = '1000';
            modal.style.padding = '20px';
            modal.style.borderRadius = '10px';
            modal.style.textAlign = 'center';
            modal.style.overflow = 'hidden';

            var img = document.createElement('img');
            img.src = src;
            img.style.maxWidth = '90%';
            img.style.maxHeight = '90%';
            img.style.borderRadius = '5px';

            var closeBtn = document.createElement('button');
            closeBtn.innerHTML = 'Close';
            closeBtn.style.position = 'absolute';
            closeBtn.style.top = '10px';
            closeBtn.style.right = '10px';
            closeBtn.style.padding = '5px 10px';
            closeBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
            closeBtn.style.color = 'white';
            closeBtn.style.border = 'none';
            closeBtn.style.borderRadius = '5px';
            closeBtn.onclick = function () {
                document.body.removeChild(modal);
            };

            modal.appendChild(img);
            modal.appendChild(closeBtn);

            document.body.appendChild(modal);
        }
    </script>


}